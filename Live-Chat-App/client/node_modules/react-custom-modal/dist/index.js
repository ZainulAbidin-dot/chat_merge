'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var ReactDOM = require('react-dom');
var PropTypes = _interopDefault(require('prop-types'));

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var body = document.body;

var Portal = function (_Component) {
  inherits(Portal, _Component);

  function Portal(props) {
    classCallCheck(this, Portal);

    var _this = possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).call(this, props));

    _this.el = document.createElement('div');
    return _this;
  }

  createClass(Portal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      body.appendChild(this.el);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      body.removeChild(this.el);
    }
  }, {
    key: 'render',
    value: function render() {
      return ReactDOM.createPortal(this.props.children, this.el);
    }
  }]);
  return Portal;
}(React.Component);


Portal.propTypes = {
  children: PropTypes.node
};

var DisabledLayer = function (_Component) {
  inherits(DisabledLayer, _Component);

  function DisabledLayer() {
    classCallCheck(this, DisabledLayer);
    return possibleConstructorReturn(this, (DisabledLayer.__proto__ || Object.getPrototypeOf(DisabledLayer)).apply(this, arguments));
  }

  createClass(DisabledLayer, [{
    key: 'render',
    value: function render() {
      if (!this.props.show) {
        return null;
      }

      return React__default.createElement('div', { className: 'DisabledLayer',
        onClick: function onClick() {
          return false;
        } });
    }
  }]);
  return DisabledLayer;
}(React.Component);


DisabledLayer.propTypes = {
  show: PropTypes.bool.isRequired
};

var Modal = function (_Component) {
  inherits(Modal, _Component);

  function Modal(props) {
    classCallCheck(this, Modal);

    var _this = possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

    _this.closeDelayTime = 250;

    _this.state = { show: false, closing: false };
    _this.close = _this.close.bind(_this);
    _this.closeImmediate = _this.closeImmediate.bind(_this);
    return _this;
  }

  createClass(Modal, [{
    key: 'show',
    value: function show(options) {
      clearTimeout(this.closeTimer);

      var props = {
        close: this.close,
        closeImmediate: this.closeImmediate
      };
      var component = options.render ? options.render(props) : React__default.cloneElement(options.component, props);

      this.options = options;
      this.component = component;
      this.setState({
        show: true,
        closing: false
      });
    }
  }, {
    key: 'close',
    value: function close() {
      var _this2 = this;

      this.setState({
        show: false,
        closing: true
      });

      this.closeTimer = setTimeout(function () {
        _this2.setState({
          closing: false
        });
        _this2.component = null;
      }, this.closeDelayTime);
    }
  }, {
    key: 'closeImmediate',
    value: function closeImmediate() {
      clearTimeout(this.closeTimer);
      this.setState({
        show: false,
        closing: false
      });
      this.component = null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          show = _state.show,
          closing = _state.closing;

      if (!show && !closing) {
        return null;
      }

      var _options = this.options,
          full = _options.full,
          animation = _options.animation;

      var _modalClassList = ['Modal', this.props.className || '', full ? 'full' : '', closing ? 'closing' : ''];

      var _dialogClassList = ['ModalDialog', animation || '', this.props.dialogClass || '', closing ? 'closing' : ''];

      return React__default.createElement(
        Portal,
        null,
        React__default.createElement(
          'div',
          { className: _modalClassList.join(' ') },
          React__default.createElement(DisabledLayer, { show: true }),
          React__default.createElement(
            'div',
            { className: 'ModalWrapper' },
            React__default.createElement(
              'div',
              { className: _dialogClassList.join(' ') },
              this.component
            )
          )
        )
      );
    }
  }]);
  return Modal;
}(React.Component);


Modal.propTypes = {
  className: PropTypes.string,
  dialogClass: PropTypes.string
};

exports.default = Modal;
exports.DisabledLayer = DisabledLayer;
exports.Portal = Portal;
//# sourceMappingURL=index.js.map
